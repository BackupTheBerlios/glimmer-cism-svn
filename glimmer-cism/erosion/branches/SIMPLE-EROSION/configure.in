dnl Process this file with autoconf to produce a configure script.

dnl set version
m4_define([erosion_major_version], [0])
m4_define([erosion_minor_version], [1])
m4_define([erosion_version],
	[erosion_major_version.erosion_minor_version])

AC_INIT([erosion],[erosion_version],[Magnus.Hagdorn@ed.ac.uk])
AM_INIT_AUTOMAKE

dnl minimum required glimmer version
min_glimmer_major_version=0
min_glimmer_minor_version=3

EROSION_MAJOR_VERSION=erosion_major_version
EROSION_MINOR_VERSION=erosion_minor_version
EROSION_VERSION=erosion_version
AC_SUBST(EROSION_MAJOR_VERSION)
AC_SUBST(EROSION_MINOR_VERSION)
AC_SUBST(EROSION_VERSION)

AC_PROG_RANLIB
AC_PROG_FC
AC_LANG_PUSH(Fortran)
AC_FC_SRCEXT(f90)
FCFLAGS="$FCFLAGS -fpp"
dnl Checking for python
AM_PATH_PYTHON([2.3],,[AC_MSG_RESULT(need at least python 2.3)])

dnl checking for glimmer prefix
AC_ARG_WITH(glimmer-prefix,[  --with-glimmer-prefix=PFX   Prefix where GLIMMER is installed (optional)],
            glimmer_config_prefix="$withval", glimmer_config_prefix="")

if test x$glimmer_config_prefix != x ; then
     glimmer_config_args="$glimmer_config_args --prefix=$glimmer_config_prefix"
     if test x${GLIMMER_CONFIG+set} != xset ; then
        GLIMMER_CONFIG=$glimmer_config_prefix/bin/glimmer-config
     fi
fi

AC_PATH_PROG(GLIMMER_CONFIG, glimmer-config, no)
if ! test -x "$GLIMMER_CONFIG"; then
  GLIMMER_CONFIG="no"
fi
if test "$GLIMMER_CONFIG" = "no" ; then
  AC_MSG_ERROR([Could not find glimmer-config])
fi

dnl Checking for version of glimmer
min_glimmer_version=$min_glimmer_major_version.$min_glimmer_minor_version
AC_MSG_CHECKING(for GLIMMER - version >= $min_glimmer_version)
no_glimmer=""
GLIMMER_CFLAGS=`$GLIMMER_CONFIG $glimmer_config_args --fcflags`
GLIMMER_LIBS=`$GLIMMER_CONFIG $glimmer_config_args --libs`
glimmer_config_major_version=`$GLIMMER_CONFIG $glimmer_config_args --version | \
       sed 's/\([[0-9]]*\).\([[0-9]]*\)/\1/'`
glimmer_config_minor_version=`$GLIMMER_CONFIG $glimmer_config_args --version | \
       sed 's/\([[0-9]]*\).\([[0-9]]*\)/\2/'`
AC_MSG_RESULT([$glimmer_config_major_version.$glimmer_config_minor_version])
if test  "$min_glimmer_major_version" -gt "$glimmer_config_major_version"; then
    no_glimmer=yes
fi
if test  "$min_glimmer_minor_version" -gt "$glimmer_config_minor_version"; then
    no_glimmer=yes
fi
if test "$no_glimmer" = "yes" ; then
  AC_MSG_ERROR([GLIMMER version too old])
fi

GLIMMER_PREFIX=`$GLIMMER_CONFIG $glimmer_config_args --prefix`
AC_SUBST(GLIMMER_PREFIX)

FCFLAGS="$CFLAGS $GLIMMER_CFLAGS"
LIBS="$GLIMMER_LIBS $LIBS"

# checking if we build the docs
AC_MSG_CHECKING([whether we should build documentation])
AC_ARG_ENABLE(doc, AS_HELP_STRING([--enable-doc],[Build documentation]),
[case "${enableval}" in
 yes)  AC_MSG_RESULT([yes]);;	
 no)   AC_MSG_RESULT([no]);;
 *) AC_MSG_ERROR(bad value ${enableval} for --enable-doc) ;;
esac],[AC_MSG_RESULT([no])])
AC_CHECK_PROGS(LATEX,[latex]) 
AC_CHECK_PROGS(DVIPS,[dvips]) 
AC_CHECK_PROGS(DVIPDFT,[dvipdfm]) 
AC_CHECK_PROGS(GNUPLOT,[gnuplot]) 
AC_CHECK_PROGS(DIA,[dia]) 
AC_CHECK_PROGS(FIG2DEV,[fig2dev]) 
AC_CHECK_PROGS(PS2EPSI,[ps2epsi]) 
AC_CHECK_PROGS(SED,[sed])
AM_CONDITIONAL([DO_DOC_PS],  [test "$DVIPS" != ""])
AM_CONDITIONAL([DO_DOC_PDF], [test "$DVIPDFT" != ""])
AM_CONDITIONAL([BUILD_DOCS], [test "$enable_doc" == "yes"])

AC_CONFIG_FILES([Makefile src/Makefile doc/Makefile doc/common/Makefile doc/erosion/Makefile])
AC_OUTPUT([erosion-config src/erosion_version.f90 doc/common/version.tex])
