! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! +                                                           +
! +  glide.f90 - part of the GLIMMER ice model                + 
! +                                                           +
! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
! 
! Copyright (C) 2004 GLIMMER contributors - see COPYRIGHT file 
! for list of contributors.
!
! This program is free software; you can redistribute it and/or 
! modify it under the terms of the GNU General Public License as 
! published by the Free Software Foundation; either version 2 of 
! the License, or (at your option) any later version.
!
! This program is distributed in the hope that it will be useful, 
! but WITHOUT ANY WARRANTY; without even the implied warranty of 
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License 
! along with this program; if not, write to the Free Software 
! Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 
! 02111-1307 USA
!
! GLIMMER is maintained by:
!
! Ian Rutt
! School of Geographical Sciences
! University of Bristol
! University Road
! Bristol
! BS8 1SS
! UK
!
! email: <i.c.rutt@bristol.ac.uk> or <ian.rutt@physics.org>
!
! GLIMMER is hosted on NeSCForge:
!
! http://forge.nesc.ac.uk/projects/glimmer/
!
! +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

#ifdef HAVE_CONFIG_H
#include "config.inc"
#endif

#include "glide_mask.inc"

module glide
  !*FD the top-level GLIDE module

  use glide_types
  use glide_start_stop
  use glide_nc_custom
  use glide_io
  use glide_lithot
  use glide_profile
  use glide_deriv
  use glimmer_config
  use glimmer_global

contains

  subroutine glide_tstep_p1(model,time)
    !*FD Performs first part of time-step of an ice model instance.
    !*FD calculate velocity and temperature
    use glimmer_global, only : rk
    use glide_thck
    use glide_velo
    use glide_setup
    use glide_temp
    use glissade_temp
    use glide_mask
    use glide_thckmask
    use glide_grids

    ! *mb* added for basal proc module  
    use glam_Basal_Proc, only : Basal_Proc_driver

    implicit none

    type(glide_global_type) :: model        !*FD model instance
    real(rk),  intent(in)   :: time         !*FD Current time in years

    ! Update internal clock
    model%numerics%time=time  
    model%temper%newtemps = .false.

    ! ------------------------------------------------------------------------ 
    ! Calculate various derivatives...
    ! ------------------------------------------------------------------------     
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%geomderv)
#endif
    call geometry_derivs(model)
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%geomderv)
#endif

#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%ice_mask1)
#endif
    call glide_maskthck(&
         model%geometry% thck,      &
         model%climate%  acab,      &
         .true.,                    &
         model%numerics%thklim,     &
         model%geometry% dom,       &
         model%geometry% mask,      &
         model%geometry% totpts,    &
         model%geometry% empty)
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%ice_mask1)
#endif

    ! ------------------------------------------------------------------------ 
    ! calculate geothermal heat flux
    ! ------------------------------------------------------------------------ 
    if (model%options%gthf.gt.0) then
       call calc_lithot(model)
    end if

    ! ------------------------------------------------------------------------ 
    ! Calculate temperature evolution and Glenn's A, if necessary
    ! ------------------------------------------------------------------------ 
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%temperature)
#endif
    if ( model%numerics%tinc >  mod(model%numerics%time,model%numerics%ntem)) then

       if (model%options%whichtemp == TEMP_REMAP_ADV) then 

         ! Vert diffusion and strain heating only; no advection
         ! Remapping routine is used to advect temperature in glide_tstep_p2

         call glissade_temp_driver(model)

       else

         ! standard Glide driver, including temperature advection

         call glide_temp_driver(model, model%options%whichtemp)

       endif

       model%temper%newtemps = .true.

    end if
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%temperature)
#endif

    ! ------------------------------------------------------------------------ 
    ! Calculate basal traction factor
    ! ------------------------------------------------------------------------ 
    call calc_btrc(model,model%options%whichbtrc,model%velocity%btrc)

    ! ------------------------------------------------------------------------ 
    ! Calculate basal shear strength from Basal Proc module, if necessary
    ! ------------------------------------------------------------------------    
    if (model%options%which_bmod == BAS_PROC_FULLCALC .or. &
        model%options%which_bmod == BAS_PROC_FASTCALC) then
        call Basal_Proc_driver (model%general%ewn,model%general%nsn,model%general%upn,       &
                                model%numerics%ntem,model%velocity_hom%uvel(model%general%upn,:,:), &
                                model%velocity_hom%vvel(model%general%upn,:,:), &
                                model%options%which_bmod,model%temper%bmlt,model%basalproc)
    end if

  end subroutine glide_tstep_p1


  subroutine glide_tstep_p2(model,no_write)
    !*FD Performs second part of time-step of an ice model instance.
    !*FD write data and move ice
    use glide_thck
    use glide_velo
    use glide_ground
    use glide_setup
    use glide_temp
    use glide_mask
    use isostasy

    ! *sfp** driver module/subroutines for Payne/Price HO dynamics and LANL inc. remapping for dH/dt 
    ! Modeled after similar routines in "glide_thck"
    use glam, only: inc_remap_driver

    ! *sfp** added for summer modeling school
    use fo_upwind_advect, only: fo_upwind_advect_driver

    ! *sfp* added so that stress tensor is populated w/ HO stress fields
    use stress_hom, only: glide_stress

    implicit none

    type(glide_global_type) :: model        !*FD model instance
    logical,optional :: no_write

    logical nw

    ! ------------------------------------------------------------------------ 
    ! write to netCDF file
    ! ------------------------------------------------------------------------ 
    if (present(no_write)) then
       nw=no_write
    else
       nw=.false.
    end if 

    if (.not. nw) call glide_io_writeall(model,model)

    ! ------------------------------------------------------------------------ 
    ! Calculate flow evolution by various different methods
    ! ------------------------------------------------------------------------ 
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%ice_evo)
#endif
    select case(model%options%whichevol)
    case(EVOL_PSEUDO_DIFF) ! Use precalculated uflx, vflx -----------------------------------

       call thck_lin_evolve(model,model%temper%newtemps)

    case(EVOL_ADI) ! Use explicit leap frog method with uflx,vflx -------------------

       call stagleapthck(model,model%temper%newtemps)

    case(EVOL_DIFFUSION) ! Use non-linear calculation that incorporates velocity calc -----

       call thck_nonlin_evolve(model,model%temper%newtemps)

    case(EVOL_INC_REMAP) ! Use incremental remapping scheme for advecting ice thickness ---
                         ! (and temperature too, if whichtemp = TEMP_REMAP_ADV)

       call inc_remap_driver( model )

       call glide_stress( model )       !*sfp* added for populating stress tensor w/ HO fields

    ! *sfp** added for summer modeling school
    case(EVOL_FO_UPWIND) ! Use first order upwind scheme for mass transport

       call fo_upwind_advect_driver( model )
 
    end select
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%ice_evo)
#endif

    ! ------------------------------------------------------------------------
    ! get new mask
    ! ------------------------------------------------------------------------
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%ice_mask2)
#endif
    call glide_set_mask(model%numerics, model%geometry%thck, model%geometry%topg, &
                        model%general%ewn, model%general%nsn, model%climate%eus, &
                        model%geometry%thkmask, model%geometry%iarea, model%geometry%ivol)
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%ice_mask2)
#endif

    !calculate the normal at the marine margin
    call glide_marine_margin_normal(model%geometry%thck, model%geometry%thkmask, model%geometry%marine_bc_normal)

    !calculate the grounding line flux after the mask is correct
    call calc_gline_flux(model%geomderv%stagthck,model%velocity%surfvel, &
    model%geometry%thkmask,model%ground%gline_flux, model%velocity%ubas, &
    model%velocity%vbas, model%numerics%dew)

   ! ------------------------------------------------------------------------ 
    ! Remove ice which is either floating, or is present below prescribed
    ! depth, depending on value of whichmarn
    ! ------------------------------------------------------------------------ 
    call glide_marinlim(model%options%whichmarn, &
         model%geometry%thck,      &
         model%isos%relx,      &
         model%geometry%topg,   &
         model%temper%flwa,   &
         model%numerics%sigma,   &
         model%geometry%thkmask,    &
         model%numerics%mlimit,     &
         model%numerics%calving_fraction, &
         model%climate%eus,         &
         model%climate%calving,  &
         model%climate%backstress, &
         model%climate%tempanmly, &
         model%numerics%dew,    &
         model%numerics%dns, &
         model%climate%backstressmap, &
         model%climate%stressout, &
         model%climate%stressin, &
         model%ground, &
         model%general%nsn, &
         model%general%ewn, &
         model%geometry%usrf)

    !issues with ice shelf, calling it again fixes the mask
    call glide_set_mask(model%numerics, model%geometry%thck, model%geometry%topg, &
                        model%general%ewn, model%general%nsn, model%climate%eus, &
                        model%geometry%thkmask, model%geometry%iarea, model%geometry%ivol)

    call calc_iareaf_iareag(model%numerics%dew,model%numerics%dns, &
                            model%geometry%iarea, model%geometry%thkmask, &
                            model%geometry%iareaf, model%geometry%iareag)

    ! ------------------------------------------------------------------------
    ! update ice/water load if necessary
    ! ------------------------------------------------------------------------
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%isos_water)
#endif
    if (model%isos%do_isos) then
       if (model%numerics%time.ge.model%isos%next_calc) then
          model%isos%next_calc = model%isos%next_calc + model%isos%period
          call isos_icewaterload(model)
          model%isos%new_load = .true.
       end if
    end if
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%isos_water)
#endif
    
    ! basal shear stress calculations
    call calc_basal_shear(model)

  end subroutine glide_tstep_p2

  subroutine glide_tstep_p3(model)
    !*FD Performs third part of time-step of an ice model instance:
    !*FD calculate isostatic adjustment and upper and lower ice surface
    use isostasy
    use glide_setup
    implicit none
    type(glide_global_type) :: model        !*FD model instance
    
    ! ------------------------------------------------------------------------ 
    ! Calculate isostasy
    ! ------------------------------------------------------------------------ 
#ifdef PROFILING
    call glide_prof_start(model,model%glide_prof%isos)
#endif
    if (model%isos%do_isos) then
       call isos_isostasy(model)
    end if
#ifdef PROFILING
    call glide_prof_stop(model,model%glide_prof%isos)
#endif

    ! ------------------------------------------------------------------------
    ! calculate upper and lower ice surface
    ! ------------------------------------------------------------------------
    call glide_calclsrf(model%geometry%thck, model%geometry%topg, model%climate%eus, model%geometry%lsrf)
    model%geometry%usrf = max(0.d0,model%geometry%thck + model%geometry%lsrf)

    ! increment time counter
    model%numerics%timecounter = model%numerics%timecounter + 1

  end subroutine glide_tstep_p3

  !-------------------------------------------------------------------

  subroutine glide_write_mod_rst(rfile)

    use glimmer_log
    use glimmer_restart_common

#ifdef RESTARTS
    use glide_types
    use isostasy_types
#endif

    type(restart_file) :: rfile      !*FD Open restart file 

#ifdef RESTARTS
    call glide_types_modrsw(rfile)
    call isostasy_types_modrsw(rfile)
#else
    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
#endif

  end subroutine glide_write_mod_rst

  !-------------------------------------------------------------------

  subroutine glide_read_mod_rst(rfile)

    use glimmer_log
    use glimmer_restart_common

#ifdef RESTARTS
    use glide_types
    use isostasy_types
#endif

    type(restart_file) :: rfile      !*FD Open restart file 

#ifdef RESTARTS
    call glide_types_modrsr(rfile)
    call isostasy_types_modrsr(rfile)
#else
    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
#endif

  end subroutine glide_read_mod_rst

  !-------------------------------------------------------------------

  subroutine glide_write_restart(model,rfile)

    use glimmer_log
    use glimmer_restart
    use glimmer_restart_common
    implicit none

    type(glide_global_type) :: model !*FD model instance
    type(restart_file) :: rfile      !*FD Open restart file     

#ifdef RESTARTS
    call glimmer_write_mod_rst(rfile)
    call glide_write_mod_rst(rfile)
    call rsw_glide_global_type(rfile,model)
#else
    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
#endif

  end subroutine glide_write_restart

  !-------------------------------------------------------------------

  subroutine glide_read_restart(model,rfile,prefix)

    use glimmer_log
    use glimmer_restart
    use glimmer_restart_common
    use glimmer_ncdf
    use glimmer_ncio
    implicit none

    type(glide_global_type) :: model !*FD model instance
    type(restart_file) :: rfile      !*FD Open restart file 
    character(*),optional,intent(in) :: prefix !*FD prefix for new output files

    character(40) :: pf

    if (present(prefix)) then
       pf = prefix
    else
       pf = 'RESTART_'
    end if

#ifdef RESTARTS
    call glimmer_read_mod_rst(rfile)
    call glide_read_mod_rst(rfile)
    call rsr_glide_global_type(rfile,model)
    call nc_repair_outpoint(model%funits%out_first)
    call nc_repair_inpoint(model%funits%in_first)
    call nc_prefix_outfiles(model%funits%out_first,trim(pf))
    call openall_out(model)
    call glide_io_createall(model)
    call glide_nc_fillall(model)
#else
    call write_log('No restart code available - rebuild GLIMMER with --enable-restarts',GM_FATAL)
#endif

  end subroutine glide_read_restart

end module glide
