shelf
=====
This directory contains Python scripts for running idealized ice shelf
experiments.

Confined Shelf Experiment
=========================

To run the confined shelf experiment, enter the following on a terminal 
command line:

python confined-shelf.py

This will run the script using the configuration file "confined-shelf.config" 
which is also found in this directory.  If you want to run the experiment using
a different configuration file you can include the filename as an optional
command line argument.  For example:

python confined-shelf.py your.config

The script performs the following three steps:
1. Create a netCDF input file for Glimmer.
2. Run Glimmer, creating a netCDF output file.
3. Move any additional files written by Glimmer to the "scratch" subdirectory.

The netCDF files are written in the "output" subdirectory. This is controlled
by a parameter in the configuration file so if you use your own configuration
file the output may be written elsewhere.  Unless someone changed 
confined-shelf.config since I wrote this, confined-shelf.config includes the 
lines:

[CF input]
name = output/confined-shelf.nc

and

[CF output]
name = output/confined-shelf.out.nc

which are what direct the output to the "output" subdirectory.

PREREQUISITES:
In order to use the confined-shelf.py script, you will need to have Python and 
one of the following Python modules installed:
Scientific.IO.NetCDF, netCDF4, or pycdf

To view the results use ncview or another utility for viewing netCDF files.

WARNING: If you have files with names ending ".txt", ".log", or ".nc" in the
directory from which you are running confined-shelf.py they will get moved to 
the "scratch" subdirectory when you run confined-shelf.py.  In addition, if you
use a configuration file that specifies netCDF files (with names ending ".nc") 
are to be written in the current directory, they will get moved to the "scratch"
subdirectory after they are written.

Circular Shelf Experiment
=========================

To run the circular shelf experiment, enter the following on a terminal 
command line:

python circular-shelf.py

This will run the script using the configuration file "circular-shelf.config" 
which is also found in this directory.  If you want to run the experiment using
a different configuration file you can include the filename as an optional
command line argument.  For example:

python circular-shelf.py your.config

In addition to specifying a configuration file, you can also specify one or 
more of the following options on the command line:

--smooth-beta (or the short version, -b) specifies that a Gaussian function
will be used for beta.  The default is that there is a small square region
in the center of the domain where beta is large; Beta is one over the rest of
the domain.  There is an abrupt step from the large value (1.0e10) to one (1.0)
when using the default.

--dirichlet-center (or the short version, -d) specifies that a Dirichlet 
boundary condition (velocity = zero) will be applied in a small square at the 
center of the domain.

--sloped (or the short version, -s) specifies that the ice thickness field will
have a conical top.  The default is that the ice thickness is constant (that is,
a flat top).

To summarize, the syntax for running the circular shelf experiment is:

python circular-shelf.py [FILE.CONFIG] [-b|--smooth-beta] [-d|--dirichlet-center] [-s|--sloped]

The script performs the following three steps:
1. Create a netCDF input file for Glimmer.
2. Run Glimmer, creating a netCDF output file.
3. Move any additional files written by Glimmer to the "scratch" subdirectory.

The netCDF files are written in the "output" subdirectory. This is controlled
by a parameter in the configuration file so if you use your own configuration
file the output may be written elsewhere.  Unless someone changed 
circular-shelf.config since I wrote this, circular-shelf.config includes the 
lines:

[CF input]
name = output/circular-shelf.nc

and

[CF output]
name = output/circular-shelf.out.nc

which are what direct the output to the "output" subdirectory.

PREREQUISITES:
In order to use the circular-shelf.py script, you will need to have Python and 
one of the following Python modules installed:
Scientific.IO.NetCDF, netCDF4, or pycdf

To view the results use ncview or another utility for viewing netCDF files.

WARNING: If you have files with names ending ".txt", ".log", or ".nc" in the
directory from which you are running circular-shelf.py they will get moved to 
the "scratch" subdirectory when you run circular-shelf.py.  In addition, if you
use a configuration file that specifies netCDF files (with names ending ".nc") 
are to be written in the current directory, they will get moved to the "scratch"
subdirectory after they are written.

